React Component props and State
==================================


What is the difference between state and props?
===============================================
props (short for “properties”) and state are both plain JavaScript objects. 
While both hold information that influences the output of render, they are different in one important way: 
  
  1.props get passed to the component (similar to function parameters)
  2.state is managed within the component (similar to variables declared within a function).

Here are some good resources for further reading on when to use props vs state:

Props vs State
ReactJS: Props vs. State


Why is setState giving me the wrong value?
==========================================
In React, both this.props and this.state represent the rendered values, i.e. what’s currently on the screen.

Calls to setState are asynchronous - don’t rely on this.state to reflect the new value immediately after calling setState. 
Pass an updater function instead of an object if you need to compute values based on the current state (see below for details).

Example of code that will not behave as expected:
==================================================

incrementCount() {
  // Note: this will *not* work as intended.
  this.setState({count: this.state.count + 1});
}

handleSomething() {
  // Let's say `this.state.count` starts at 0.
  this.incrementCount();
  this.incrementCount();
  this.incrementCount();
  // When React re-renders the component, `this.state.count` will be 1, but you expected 3.

  // This is because `incrementCount()` function above reads from `this.state.count`,
  // but React doesn't update `this.state.count` until the component is re-rendered.
  // So `incrementCount()` ends up reading `this.state.count` as 0 every time, and sets it to 1.

  // The fix is described below!
}

See below for how to fix this problem.
========================================

How do I update state with values that depend on the current state?
Pass a function instead of an object to setState to ensure the call always uses the most updated version of state (see below).

What is the difference between passing an object or a function in setState?
Passing an update function allows you to access the current state value inside the updater. Since setState calls are batched,
this lets you chain updates and ensure they build on top of each other instead of conflicting:

incrementCount() {
  this.setState((state) => {
    // Important: read `state` instead of `this.state` when updating.
    return {count: state.count + 1}
  });
}

handleSomething() {
  // Let's say `this.state.count` starts at 0.
  this.incrementCount();
  this.incrementCount();
  this.incrementCount();

  // If you read `this.state.count` now, it would still be 0.
  // But when React re-renders the component, it will be 3.
}
Learn more about setState

When is setState asynchronous?
Currently, setState is asynchronous inside event handlers.

This ensures, for example, that if both Parent and Child call setState during a click event, Child isn’t re-rendered twice. 
Instead, React “flushes” the state updates at the end of the browser event. This results in significant performance improvements in larger apps.

This is an implementation detail so avoid relying on it directly. In the future versions, React will batch updates by default in more cases.

Why doesn’t React update this.state synchronously?
===================================================
As explained in the previous section, React intentionally “waits” until all components call setState() in their event handlers before starting to re-render. 
This boosts performance by avoiding unnecessary re-renders.

However, you might still be wondering why React doesn’t just update this.state immediately without re-rendering.

There are two main reasons:

1.This would break the consistency between props and state, causing issues that are very hard to debug.
2.This would make some of the new features we’re working on impossible to implement.



Controlled and Uncontrolled Forms
==================================

In most cases, we recommend using controlled components to implement forms. In a controlled component, form data is handled by a React component.
The alternative is uncontrolled components, where form data is handled by the DOM itself.

UnControlled Components
========================
To write an uncontrolled component, instead of writing an event handler for every state update, you can use a ref to get form values from the DOM.

class NameForm extends React.Component {
  constructor(props) {
    super(props);
    this.handleSubmit = this.handleSubmit.bind(this);
    this.input = React.createRef();
  }

  handleSubmit(event) {
    alert('A name was submitted: ' + this.input.current.value);
    event.preventDefault();
  }

  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <label>
          Name:
          <input type="text" ref={this.input} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

Example2
=========

export default class StudentForm extends Component {
constructor(props) {
    super(props)
    this.handleSubmit = this.handleSubmit.bind(this);
    this.studentId = React.createRef();
    this.studentName = React.createRef();
    this.studentAddress = React.createRef();
}

handleSubmit(event) {

    let details=`
                 Id      :${this.studentId.current.value}
                 Name    :${this.studentName.current.value}
                 Address :${this.studentAddress.current.value}`;

    alert('A Student details was submitted:\n' + details);
    //event.preventDefault();
  }

  render() {
        return (
            <div className="text-danger">
            <h2>Student UnControlled Form </h2>
 
             <form  onSubmit={this.handleSubmit}>
             <div className="form-group">
             <label>Student Id</label>     
             <input type="text"   defaultValue="123" ref={this.studentId}  class="form-control" id="id" placeholder="Enter Student Id" name="id"/>
             </div>
             
             <div className="form-group">
             <label>Student Name</label>     
             <input type="text"  defaultValue="Pradeep Chinchole"  ref={this.studentName} class="form-control" id="name" placeholder="Enter Student Name" name="id"/>
             </div>
             
             <div className="form-group">
             <label>Student Address</label>     
             <input type="text" defaultValue="Shivane Pune" ref={this.studentAddress}  class="form-control" id="address" placeholder="Enter Student Address" name="id"/>
             </div>
             <button type="submit" class="btn btn-primary">Submit</button>
             </form>

            </div>
        )
    }
}





Default Values
==============
In the React rendering lifecycle, the value attribute on form elements will override the value in the DOM.
With an uncontrolled component, you often want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a defaultValue attribute instead of value. 
Changing the value of defaultValue attribute after a component has mounted will not cause any update of the value in the DOM.

render() {
  return (
    <form onSubmit={this.handleSubmit}>
      <label>
        Name:
        <input
          defaultValue="Bob"
          type="text"
          ref={this.input} />
      </label>
      <input type="submit" value="Submit" />
    </form>
  );
}

Controlled Components
=====================
1.In a controlled component, the form data is handled by the state within the component. 
2.The state within the component serves as “the single source of truth” for the input elements that are rendered by the component

A controlled component is bound to a value, and its changes will be handled in code by using event-based callbacks. 
Here, the input form element is handled by the react itself rather than the DOM. 
In this, the mutable state is kept in the state property and will be updated only with setState() method.

Controlled components have functions that govern the data passing into them on every onChange event occurs. 
This data is then saved to state and updated with setState() method. 
It makes component have better control over the form elements and data.


class CourseForm extends Component {


    constructor(props) {
        super(props);
        this.state = {
                id:1234,
                name:'React',
                price:2000
        };
    
        this.handleInputChange = this.handleInputChange.bind(this);
        this.handleSubmit = this.handleSubmit.bind(this);
      }
    

      
       handleSubmit(event) {
        alert('Your Course Details: ' + this.state);
        event.preventDefault();
        }

      handleInputChange(event) {
        const target = event.target;
        const name = target.name;
        const value = target.value;
    
        console.log(target,name,value);

        this.setState({
          [event.target.name]: event.target.value
        });
      }


    render() {
        return (
            <div className="text-primary">
                <h2>Course Controlled Form </h2>
 
 <form  onSubmit={this.handleSubmit}>
 <div className="form-group">
 <label>Course Id</label>     
 <input type="text" value={this.state.id}  className="form-control" id="id" placeholder="Enter Course Id" name="id"  onChange={this.handleInputChange} />
 </div>
 
 <div className="form-group">
 <label>Course Name</label>     
 <input type="text"  value={this.state.name}   className="form-control" id="name" placeholder="Enter Course Name" onChange={this.handleInputChange}/>
 </div>
 
 <div className="form-group">
 <label>Course Price </label>     
 <input type="text" value={this.state.price}  className="form-control" id="price" placeholder="Enter Course Price" onChange={this.handleInputChange}/>
 </div>
 <button type="submit" className="btn btn-primary">Submit</button>
 </form>
    <pre>
    Course Id :{this.state.id}  
    Name      :{this.state.name}  
    Price     :{this.state.price}  
        
    </pre>


</div>
        )
    }
}

export default CourseForm

Context API
===========

Context
Context provides a way to pass data through the component tree without having to pass props down manually at every level.

In a typical React application, data is passed top-down (parent to child) via props, but this can be cumbersome for certain types of props 
(e.g. locale preference, UI theme) that are required by many components within an application. Context provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.

When to Use Context
Before You Use Context
API

React.createContext
Context.Provider
Class.contextType
Context.Consumer
Context.displayName


=============================
State Lifting

Parent.js
============

export class Parent extends Component {
    state={
        message:'Parent Message',
        childMessage:''
    }

     getChildMessage=(childMessage)=>{
        console.log("Clicked ...");

           this.setState({
    childMessage:childMessage
  });

}
    render() {
        return (
            <div>
                <h2>Passing the event handler as a props to Child Component</h2>
                <h3> Parent Message : {this.state.message}</h3>
                <h3> Child Message : {this.state.childMessage}</h3>
    
                
                <Child  childChanged={this.getChildMessage}/>
            </div>
        )
    }
}

Child.js
=========

export class Child extends Component {
    state={
        message:'Child Message:'
        }
}
render() {
        console.log(this.props)
        let {childChanged}=this.props;
        let {message}=this.state;
        
        return (
            <div>
                <h2>Child Message :{this.state.message}</h2>
                <button onClick={()=>childChanged(message+" :"+Math.random()*10)}>Get Child Message</button>

            </div>
        )
    }
}


Higher-Order Components
========================
A higher-order component (HOC) is an advanced technique in React for reusing component logic. 
HOCs are not part of the React API, per se. They are a pattern that emerges from React’s compositional nature.

Concretely, a higher-order component is a function that takes a component and returns a new component.

  Example
  =========
  
  const EnhancedComponent = higherOrderComponent(WrappedComponent);


class HoverCounter extends Component {
    // constructor(props) {
    //   super(props)
    
    //   this.state = {
    //      count:0
    //   };
    // };
    
  
    // incrementCount=()=>{
    //     this.setState(prevState=>{
    //           return {count:prevState.count+1}
    //     })
    // }

   
    render() {
        let {count,incrementCount}=this.props;

        return (
            <div>
              <h2 onMouseOver={incrementCount}>{this.props.name} Hoverd {count} times</h2>
            </div>
        )
    }
}

export default UpdatedComponent(HoverCounter)

class ClickCounter extends Component {

    // constructor(props) {
    //   super(props)
    
    //   this.state = {
    //      count:0
    //   };
    // };
    
    // incrementCount=()=>{
    //     this.setState(prevState=>{
    //           return {count:prevState.count+1}
    //     })
    // }

     render() {

        let {count,incrementCount}=this.props;

         return (
             <div>
                 <button onClick={incrementCount}>{this.props.name} Clicked {count} times</button>
             </div>
         )
     }
}

export default UpdatedComponent(ClickCounter)

import React from 'react';

const UpdatedComponent=OriginalComponent=>{
class NewComponent extends React.Component{

    constructor(props) {
        super(props)
      
        this.state = {
           count:0
        };
      };
      
    
      incrementCount=()=>{
          this.setState(prevState=>{
                return {count:prevState.count+1}
          })
      }
  
 render(){
    return <OriginalComponent   name="Pradeep"  count={this.state.count}  incrementCount={this.incrementCount}/>;
}

}
return NewComponent
}

export default UpdatedComponent






